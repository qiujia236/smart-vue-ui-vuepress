(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{636:function(t,e,a){"use strict";a.r(e);var s=a(52),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"uploader-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uploader-组件"}},[t._v("#")]),t._v(" uploader 组件")]),t._v(" "),a("p",[t._v("修改了常见的上传组件，组件内提供了3个api")]),t._v(" "),a("ol",[a("li",[t._v('"https://express-vue-components.herokuapp.com/single2"；')]),t._v(" "),a("li",[t._v('"https://express-vue-components.herokuapp.com/single3"；')]),t._v(" "),a("li",[t._v('"https://express-vue-components.herokuapp.com/merge"。')])]),t._v(" "),a("p",[t._v("其中第一个api和普通的文件上传没有区别。但是上传的是base64编码格式的数据，可以改造成多文件上传，[文件名]=[base64编码]。")]),t._v(" "),a("p",[t._v("第二个和第三个api用于超出文件尺寸的上传，采用的是断点续传的机制。将大文件转换为buffer 流后再在切片为 bufferCount（默认为50）个流片段，在再通过single3 api将100个流片段依次上传到服务器，上传完后再发送merge api，通知服务器将bufferCount\n个文档流片段合并为一个流片段。根据后缀名生成原文将再在服务器中保存。")]),t._v(" "),a("p",[t._v("断点续传时，会出现一个上传次数的进度条，可点击此进度条，随时暂停上传。再点击，就可以恢复从上一次的上传树回复上传。")]),t._v(" "),a("p",[t._v("最后服务器会将保存好的文件以http协议的形式将地址发送给客户端。")]),t._v(" "),a("h2",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),a("ClientOnly",[a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("<uploader-demo />\n")])])])]),t._v(" "),a("p",[a("strong",[t._v("示例代码：")])]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("my"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("uploader "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1024 * 1024"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("bufferCount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("my"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("uploader"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h2",{attrs:{id:"attributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attributes"}},[t._v("#")]),t._v(" Attributes")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("可选值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("size")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("根据你选在的size来使用不同的api进行上传，如果小于size值，采用普通的上传方式，大于时，采用断点续传，分割上传的方式。尺寸为byte")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Number")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("--")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("4MB")])]),t._v(" "),a("tr",[a("td",[t._v("bufferCount")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("采用断点续传的方式上传文件时，文档流分割的片段数。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Number")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("--")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("50")])])])])],1)}),[],!1,null,null,null);e.default=r.exports}}]);